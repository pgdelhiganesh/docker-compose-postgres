# A Docker Compose must always start with the version tag.
# We use '3.8' because it's the last version.
version: '3.8'

# You should know that Docker Compose works with services.
# 1 service = 1 container.
# For example, a service, a server, a client, a database...
# We use the keyword 'services' to start to create services.
services:
  # The name of our service is "database"
  # but you can use the name of your choice.
  # Note: This may change the commands you are going to use a little bit.
  database_postgres:
    container_name: database_postgres
    # Official Postgres image from DockerHub (we use the last version)
    image: 'postgres:latest'
    # By default, a Postgres database is running on the 5432 port.
    # If we want to access the database from our computer (outside the container),
    # we must share the port with our computer's port.
    # The syntax is [port we want on our machine]:[port we want to retrieve in the container]
    # Note: You are free to change your computer's port,
    # but take into consideration that it will change the way
    # you are connecting to your database.
    ports:
      - "5432:5432"
    # The `volumes` tag allows us to share a folder with our container
    # Its syntax is as follows: [folder path on our machine]:[folder path to retrieve in the container]
    volumes:
    # In this example, we share the folder `db-data` in our root repository, with the default PostgreSQL data path
    # It means that every time the repository is modifying the data inside
    # of `/var/lib/postgresql/data/`, automatically the change will appear in `db-data`
    # You don't need to create the `db-data` folder. Docker Compose will do it for you
      - postgres_data:/var/lib/postgresql/data/
    # In this example, we share an init.sql script with the container
    # The init script will be executed when the database is first run
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready"]
      # Check if PostgreSQL is accepting connections
      interval: 10s
      # Check every 10 seconds
      timeout: 5s
      # Timeout after 5 seconds if no response
      retries: 5
      # Retry 5 times before considering the service unhealthy
    restart: unless-stopped
      # Automatically restart the container unless it is explicitly stopped
    env_file:
      - environment
    networks:
      - postgres-network  # Added network

  pgadmin:
    container_name: pgadmin_postgres
    image: 'dpage/pgadmin4:latest'
    ports:
      - "15433:80"
    depends_on:
      database_postgres:
        condition: service_healthy
        # Ensure pgAdmin starts only after PostgreSQL is healthy and accepting connections
    volumes:
      - pgadmin_data:/var/lib/pgadmin/
      # Persist pgAdmin configuration data (e.g., server connections) across restarts
    restart: unless-stopped
      # Automatically restart the container unless it is explicitly stopped
    env_file:
      - environment
    networks:
      - postgres-network
      
volumes:
  postgres_data:
    # Named volume for storing PostgreSQL data
  pgadmin_data:
    # Named volume for storing pgAdmin configuration
    
networks:
  postgres-network:
    driver: bridge